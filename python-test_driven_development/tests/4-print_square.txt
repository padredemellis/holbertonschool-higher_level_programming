The ``4-print_square`` module
=============================

Using ``print_square``
---------------------

Import function from module:
    >>> print_square = __import__('4-print_square').print_square

Test with size 4:
    >>> print_square(4)
    ####
    ####
    ####
    ####

Test with size 10:
    >>> print_square(10)
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########

Test with size 0:
    >>> print_square(0)
    

Test with size 1:
    >>> print_square(1)
    #

Test with negative size:
    >>> print_square(-1)
    Traceback (most recent call last):
    ...
    ValueError: size must be >= 0

Test with non-integer size:
    >>> print_square("size")
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer

Test with float:
    >>> print_square(5.5)
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer

Test with negative float:
    >>> print_square(-5.5)
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer

Test with None:
    >>> print_square(None)
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer

Test with boolean True:
    >>> print_square(True)
    #

Test with boolean False:
    >>> print_square(False)
    

Test with complex number:
    >>> print_square(1+1j)
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer

Test with list:
    >>> print_square([1])
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer

Test with no arguments:
    >>> print_square()
    Traceback (most recent call last):
    ...
    TypeError: print_square() missing 1 required positional argument: 'size'

Test with too many arguments:
    >>> print_square(2, 2)
    Traceback (most recent call last):
    ...
    TypeError: print_square() takes 1 positional argument but 2 were given